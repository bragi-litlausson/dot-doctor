#+TITLE: Dot Doctor Code
This is my first attempt of doing literate programming, don't be to harsh. ;)

This document will go over the implementation of Dot Doctor. For me info about the project check =README.org=.


* Imports
#+begin_src python :tangle dotdoctor.py :shebang #!/usr/bin/env python3
import curses
from curses import wrapper

import os
from os import environ, path

import sys
import shutil
#+end_src
* Helpers
This section contains wrappers ad helpers for modules used in the project.
** Environ Module
I need only two helper methods for environ module.
Application needs to check is =env= exists and to get it.
#+begin_src python :tangle dotdoctor.py
def env_exists(name):
    return name in environ
def get_env(name):
    return environ.get(name)
#+end_src
** Curses Module
*** Init color pairs
Boilerplate code used to set up color pairs used by curses module.
Color pair "0" is hard-coded to white on black
#+begin_src python :tangle dotdoctor.py
def init_color_pairs():
    # GREEN on BLACK
    curses.init_pair(1, curses.COLOR_GREEN, curses.COLOR_BLACK)
    # RED on BLACK
    curses.init_pair(2, curses.COLOR_RED, curses.COLOR_BLACK)
    # MAGENTA on BLACK
    curses.init_pair(3, curses.COLOR_MAGENTA, curses.COLOR_BLACK)
    # GREEN on WHITE
    curses.init_pair(6, curses.COLOR_GREEN, curses.COLOR_WHITE)
    # RED on WHITE
    curses.init_pair(7, curses.COLOR_RED, curses.COLOR_WHITE)
#+end_src
*** Error page
When initial requirements are not me app should inform user about the nature of the problem.
This can happen more than once so I needed a function to handle drawing error prompt.
#+begin_src python :tangle dotdoctor.py
def draw_error_message(stdscr, header, message):
    stdscr.clear()
    stdscr.addstr(3, 3, header, curses.color_pair(2))
    stdscr.addstr(4, 3, message, curses.color_pair(3))
    stdscr.getch()
    exit()
#+end_src
*** Config row
Another piece of User Interface that needed generic function is row used to display info about particular config file/directory.
#+begin_src python :tangle dotdoctor.py
def draw_config_row(stdscr, dot_data, y, is_active):
    color_pair_modifier = 0
    if is_active:
        color_pair_modifier = 5

    if dot_data.status:
        stdscr.addstr(y, 2, dot_data.get_name(), curses.color_pair(1+color_pair_modifier))
    else:
        stdscr.addstr(y, 2, dot_data.get_name(), curses.color_pair(2+color_pair_modifier))
#+end_src

* Dot Data
Dot Data is used to store all the info about configuration files/directories.
#+begin_src python :tangle dotdoctor.py
class DotData:
    def __init__(self, name, relative_path, is_directory):
        self.name = name
        self.relative_path = relative_path
        self.status = False
        self.is_directory = is_directory
    def set_status(self, status):
        self.status = status
    def get_name(self):
        if self.is_directory:
            return "{}{}".format(self.name, "/")
        else:
            return self.name
#+end_src
* Initialize
** $dotdoctor_dir
#+begin_src python :tangle dotdoctor.py
def validate_env_var():
    verify_dotdoctor_dir_env()
    validate_dotdoctor_dir()
#+end_src
*** Checking environmental variable
To locate directory with config files *dot doctor* uses environmental variable called =dotdoctor_dir=.
I guess at some point I could change this to variable stored in config file, but for the first version it will be more than enough.

If env is not set app will display error message using helper function.
**** Verify dotdoctor_dir env
#+begin_src python :tangle dotdoctor.py
dotdoctor_dir = ""
def verify_dotdoctor_dir_env():
    global dotdoctor_dir
    if env_exists("dotdoctor_dir"):
        dotdoctor_dir = get_env("dotdoctor_dir")
    else:
        wrapper(draw_env_missing_error)
#+end_src
***** Draw env missing error message
#+begin_src python :tangle dotdoctor.py
def draw_env_missing_error(stdscr):
    init_color_pairs()
    header = "ERROR"
    message = "Environemntal variable $dotdoctor_dir is not set. Variable should contain absolute path to your config repository."
    draw_error_message(stdscr, header, message)
    stdscr.getkey()
#+end_src
*** Check the dotdoctor_dir path
Call me crazy but checking if the directory provided by the user exits and has at least one file inside sounds like a good idea.
**** Verify config repository dir
#+begin_src python :tangle dotdoctor.py
def validate_dotdoctor_dir():
    if os.path.exists(dotdoctor_dir) == False:
        wrapper(draw_dir_missing_error)
    if len(os.listdir(dotdoctor_dir)) == 0:
        wrapper(draw_dir_empty_error)
#+end_src
***** Draw dir doesn't exist error
#+begin_src python :tangle dotdoctor.py
def draw_dir_missing_error(stdscr):
    init_color_pairs()
    header = "ERROR"
    message = "{} does not exist.".format(dotdoctor_dir)
    draw_error_message(stdscr, header, message)
    stdscr.getkey()
#+end_src
***** Draw dir is empty error
#+begin_src python :tangle dotdoctor.py
def draw_dir_empty_error(stdscr):
    init_color_pairs()
    header = "ERROR"
    message = "{} is empty.".format(dotdoctor_dir)
    draw_error_message(stdscr, header, message)
    stdscr.getkey()
#+end_src
** Create necessary directory structure
Application stores all of its files and directories in =.dotdoctor= directory located in users' home directory.

Currently there is only one file and one directory used by the application.
1. =ignore= file
   list of files and directories to be ignored
2. =.backup= directory
   Directory used to store replaced config files.
#+begin_src python :tangle dotdoctor.py
home_path = get_env("HOME")
root_path = ""
def validate_directory_structure():
    validate_root_directory()
    validate_backup_directory()
#+end_src
*** Create root directory in home directory
#+begin_src python :tangle dotdoctor.py
def validate_root_directory():
    global root_path, home_path
    root_path = path.join(home_path, ".dotdoctor")
    if path.exists(root_path) == False:
        os.mkdir(root_path)
#+end_src
*** Validate backup directory
When activating config file/directory dot doctor will move existing files to =.backup= directory so we need to check if it exists and if it doesn't create it.
#+begin_src python :tangle dotdoctor.py
backup_path = ""
def validate_backup_directory():
    global backup_path, root_path
    backup_path = os.path.join(root_path, ".backup")
    if os.path.exists(backup_path) == False:
        os.mkdir(backup_path)
        cbackup_path = os.path.join(backup_path, ".config")
        os.mkdir(cbackup_path)
#+end_src

** Loading ignore file
Reads lines from =$HOME/.dotdoctor/ignore= and adds the content to the list of ignored file/directory names.

If files does not exist default file will be created.
#+begin_src python :tangle dotdoctor.py
ignore = []
def load_ignore_file():
    global ignore, root_path
    ignore_path = os.path.join(root_path, "ignore")
    if os.path.exists(ignore_path) == False:
        with open(ignore_path, "w+") as file:
            file.write(".config\n")
            file.write("README.org\n")
            file.write("README.md\n")
            file.write("LICENSE\n")
            file.write(".git\n")
    path = os.path.abspath("./ignore")
    with open(ignore_path) as file:
        ignore = file.readlines()
        ignore = [line.rstrip() for line in ignore]
#+end_src
** Create list of available files and directories
After everything is ready to go, application goes into dot files directory and creates list of directories and files inside. For now it will only go inside of =.config= directory, other directories will be treated similar to files.
#+begin_src python :tangle dotdoctor.py
config_list = []
def create_config_list():
    global config_list, ignore
    files_list = os.listdir(dotdoctor_dir)
    for file in files_list:
        if is_file_ignored(file):
            print("Ignored: {}".format(file))
        else:
            config_list.append(DotData(file, file, os.path.isdir(os.path.join(dotdoctor_dir, file))))
    if '.config' in files_list:
        path = os.path.join(dotdoctor_dir, ".config")
        files_list = os.listdir(path)
        for file in files_list:
            if is_file_ignored(file):
                print("Ignored: {}".format(file))
            else:
                config_list.append(DotData(file, os.path.join(".config", file), os.path.isdir(os.path.join(path, file))))
    config_list.sort(key=lambda x: x.name)
def is_file_ignored(file_name):
    global ignore
    return file_name in ignore
#+end_src
** Update list of enabled configs
After list of files and directories is done, dot doctor goes into home directory and check what files were replaced with symbolic links.
If the symbolic link is present config is marked as enabled.
#+begin_src python :tangle dotdoctor.py
def update_dot_data_status():
    home_path = get_env("HOME")
    for dot_data in config_list:
        dot_path = os.path.join(home_path, dot_data.relative_path)
        if os.path.exists(dot_path) and os.path.islink(dot_path):
            dot_data.set_status(True)
#+end_src
** Calling init methods
#+begin_src python :tangle dotdoctor.py
def initialize():
    validate_env_var()
    validate_directory_structure()
    load_ignore_file()
    create_config_list()
    update_dot_data_status()
#+end_src

* Logic
** Main Loop
#+begin_src python :tangle dotdoctor.py
current_index = 0
got_exit_code=False
def config_list_loop(stdscr):
    global current_index, got_exit_code
    curses.curs_set(False)
    init_color_pairs()
    while True:
        stdscr.clear()
        draw_navigation_help(stdscr)
        draw_list_of_configs(stdscr, current_index)
        process_input(stdscr.getch())
        if got_exit_code:
            break
#+end_src
** Draw List of configs
This function draws scrollable list of config files.

TBH... I have murky idea what does conditions mean. I did some trial and error at some point and it became part of the cargo cult in this application.
#+begin_src python :tangle dotdoctor.py
def draw_list_of_configs(stdscr, current_index):
    rows, cols = stdscr.getmaxyx()
    for index, dot_data in enumerate(config_list):
        if len(config_list) <= rows-2:
            draw_config_row(stdscr, dot_data, index, current_index == index)
        elif current_index < 3 and index < rows-3:
            draw_config_row(stdscr, dot_data, index, current_index == index)
        elif current_index >= 3 and index > current_index -3 and index < rows -3 + current_index-2:
            draw_config_row(stdscr, dot_data, index-(current_index-2), current_index == index)
#+end_src
** Draw navigation help
Simple function used to draw available hotkeys at the bottom of the screen.
#+begin_src python :tangle dotdoctor.py
def draw_navigation_help(stdscr):
    rows, cols = stdscr.getmaxyx()
    stdscr.addstr(rows-1, 2, "[j] down | [k] up | [enter] enable/disable config | [q] quit")
#+end_src
** Process input
Function used to process input received from the user.

10 is curses' code for the =enter= key.
#+begin_src python :tangle dotdoctor.py
def process_input(c):
    global current_index, got_exit_code
    if c == ord('q'):
        got_exit_code = True
    if c == ord('k'):
        current_index -= 1
    if c == ord('j'):
        current_index += 1
    if c == 10:
        toggle_config()
    clamp_current_index()
    return False
#+end_src
** Toggle config
#+begin_src python :tangle dotdoctor.py
def toggle_config():
    global config_list, current_index
    data = config_list[current_index]
    if data.status == False:
        activate_dot_data(data)
    else:
        deactivate_dot_data(data)
#+end_src
** Activate dot data
If file or directory already exists in =$HOME= directory, doctor will move it to =.backup= folder and create the symlink to file in config repo.
#+begin_src python :tangle dotdoctor.py
def activate_dot_data(dot_data):
    global dotdoctor_dir, backup_path
    dot_data.set_status(True)
    home_path = os.path.join(get_env("HOME"), dot_data.relative_path)
    config_path = os.path.join(dotdoctor_dir, dot_data.relative_path)
    config_path = os.path.abspath(config_path)
    if os.path.exists(home_path):
        shutil.move(home_path, backup_path)
    os.symlink(config_path, home_path)
#+end_src
** Deactivate dot data
If file or directory already exists in =.backup= directory, doctor will move it to =$HOME= folder and delete the symlink to file in config repo.
#+begin_src python :tangle dotdoctor.py
def deactivate_dot_data(dot_data):
    global dotdoctor_dir, backup_path
    dot_data.set_status(False)
    home_path = os.path.join(get_env("HOME"), dot_data.relative_path)
    path = os.path.join(backup_path, dot_data.relative_path)
    os.unlink(home_path)
    if os.path.exists(path):
        shutil.move(path, home_path)
#+end_src
** Clamp current index
#+begin_src python :tangle dotdoctor.py
def clamp_current_index():
    global current_index
    if current_index < 0:
        current_index = 0
    if current_index >= len(config_list):
        current_index = len(config_list)-1
#+end_src

* Main
#+begin_src python :tangle dotdoctor.py
if __name__ == "__main__":
    initialize()
    wrapper(config_list_loop)
#+end_src
* install.sh
#+begin_src shell :tangle install.sh :shebang #!/usr/bin/env sh
path=$(dirname $0)
dot_doctor="/dotdoctor.py"
symlinkpath="/usr/local/bin/dotdoctor"
ln -s $path$dot_doctor $symlinkpath
chmod +x "/usr/local/bin/dotdoctor"
#+end_src
