#+TITLE: Dot Doctor Code
This is my first attempt of doing literate programming, don't be to harsh. ;)

This document will go over the implementation of Dot Doctor. For me info about the project check =README.org=.

* Shebang & imports
#+begin_src python :tangle dotdoctor.py
#!/usr/bin/env python3
#+end_src
** Python
#+begin_src python :tangle dotdoctor.py
#+end_src
** Curses
I will be using curses module to create user interface.
#+begin_src python :tangle dotdoctor.py
#+end_src

* Helpers
** Environ Helper
#+begin_src python :tangle environ_helper.py
import os
from os import environ
#+end_src
*** Environmental variable exist
#+begin_src python :tangle environ_helper.py
def env_exists(name):
    return name in environ
#+end_src
*** Get environmental variable
#+begin_src python :tangle environ_helper.py
def get_env(name):
    environ.get(name)
#+end_src
** Curses Helper
#+begin_src python :tangle curses_helper.py
import curses
#+end_src
*** Init Color Pairs
This method is used to set up additional color pairs for curses to use. By default only one color pair exists (0: white on black).
#+begin_src python :tangle curses_helper.py
def init_color_pairs():
    curses.init_pair(1, curses.COLOR_GREEN, curses.COLOR_BLACK)
    curses.init_pair(2, curses.COLOR_RED, curses.COLOR_BLACK)
    curses.init_pair(3, curses.COLOR_MAGENTA, curses.COLOR_BLACK)
#+end_src
*** Draw Error page
This is method is a quick and easy way to create error message.
#+begin_src python :tangle curses_helper.py
def draw_error_page(stdscr, header, message):
    stdscr.clear()
    stdscr.addstr(3, 3, header, curses.color_pair(2))
    stdscr.addstr(4, 3, message, curses.color_pair(3))
#+end_src

* Init
** Checking variable
To locate directory with config files *dot doctor* uses environmental variable called =dotdoctor_dir=.
I guess at some point I could change this to variable stored in config file, but for the first version it will be more than enough.
** Check the dotdoctor_dir
Call me crazy but checking if the directory exits and has at least one file inside sounds like a good idea.
** Create list of available files and directories
After everything is ready to go, application goes into dot files repo and creates list of directories and files inside. For now it will only go inside of =.config= directory, other directories will be treated similar to files.
** Update list of enabled configs
After list of files and directories is done, dot doctor goes into home directory and check what files were replaced with symbolic links. If the symbolic link is present config is marked as enabled.
